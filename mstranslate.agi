#!/usr/bin/env perl

#
# AGI script that uses MS Translator API for text translation.
#
# Copyright (C) 2012, Lefteris Zafiris <zaf.000@gmail.com>
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2. See the COPYING file
# at the top of the source tree.
#
# -----
# Usage
# -----
# agi(mstranslate.agi,"text",[target language],[source language]):
# The text string will be send to MS Translator for translation to target language.
# The translated text will be stored as a channel variable named 'mstranslation'.
# The setting of source language is optional, if not set the tranlator engine
# will try to auto detect it.
# If both target language and source language are omitted the script performs language
# detection on the given text string and returns the two-character language code
# as the value of the channel variable 'mslang'
#
# In order to use this script you have to subscribe to the Microsoft
# Translator API on Azure Marketplace:
# https://datamarket.azure.com/developer/applications/
#
# Existing API Keys from http://www.bing.com/developers/appids.aspx
# still work but they are considered deprecated and this method
# is no longer supported.
#

use warnings;
use strict;
use CGI::Util qw(escape);
use LWP::UserAgent;
$| = 1;

# ----------------------------------- #
#   User defined parameters:          #
# ----------------------------------- #
# Your Azure Marketplace credentials. #
my $clientid = "";
my $clientsecret = "";

#       ****DEPRECATED****            #
#  Your Bing App ID                   #
my $appid   = "";

# Verbose debugging messages          #
my $debug = 0;

# ----------------------------------- #

my %AGI;
my $text;
my $in_lang;
my $out_lang;
my $timeout = 10;
my $url     = "http://api.microsofttranslator.com/V2/Http.svc";
my $content = "text/plain";

# Store AGI input #
while (<STDIN>) {
	chomp;
	last if (!length);
	$AGI{$1} = $2 if (/^agi_(\w+)\:\s+(.*)$/);
}
($AGI{arg_1}, $AGI{arg_2}, $AGI{arg_3}) = @ARGV;

my $name = " -- $AGI{request}:";

#if ($debug) {
#	warn "$name AGI Environment Dump:\n";
#	warn "$name $_ = $AGI{$_}\n" foreach (sort keys %AGI);
#}

# Reset channel variable. #
foreach ("mstranslation", "mslang") {
	print "SET VARIABLE \"$_\" \"-1\"\n";
	checkresponse();
}

# Get access token if no AppID is defined #
$appid = get_access_token() if (!$appid);
die "$name No API key found. Aborting.\n" if (!$appid);

# Sanitising input #
for ($AGI{arg_1}) {
	s/[\\|*~<>^\(\)\[\]\{\}[:cntrl:]]/ /g;
	s/\s+/ /g;
	s/^\s|\s$//g;
	die "$name No text passed. Aborting\n" if (!length);
	$text = $_;
}

# Setting source and target language  #
if (length($AGI{arg_2})) {
	if ($AGI{arg_2} =~ /[a-zA-Z\-]{2,}/) {
		$out_lang = $AGI{arg_2};
	} else {
		die "$name Invalid output language setting.\n";
	}
	if (length($AGI{arg_3})) {
		if ($AGI{arg_3} =~ /[a-zA-Z\-]{2,}/) {
			$in_lang = $AGI{arg_3};
		} else {
			warn "$name Invalid input language setting. Using auto-detect.\n";
		}
	}
} else {
	warn "$name Performing Language detection.\n";
}

warn "$name Text passed for translation: $text\ntarget lang: $out_lang\n" if ($debug && $out_lang);
warn "$name Text passed for language detection: $text\n" if ($debug && !$out_lang);

# Translate text using MS Translator API #
my $ua = LWP::UserAgent->new;
$ua->env_proxy;
$ua->timeout($timeout);
$text = escape($text);

if ($in_lang && $out_lang) {
	$url .= "/Translate?text=$text&from=$in_lang&to=$out_lang&contentType=$content&appid=$appid";
} elsif (!$in_lang && $out_lang) {
	$url .= "/Translate?text=$text&to=$out_lang&contentType=$content&appid=$appid";
} elsif (!$out_lang) {
	$url .= "/Detect?text=$text&appid=$appid";
}

my $request = HTTP::Request->new('GET' => "$url");
my $response = $ua->request($request);
die "$name Failed to fetch file.\n" if (!$response->is_success);
# export resulted text to channel variable #
$response->content =~ /<string.*>(.*)<\/string>/;

if ($out_lang) {
	print "SET VARIABLE \"mstranslation\" \"$1\"\n";
	checkresponse();
} else {
	print "SET VARIABLE \"mslang\" \"$1\"\n";
	checkresponse();
}

exit;

sub get_access_token {
# Obtaining an Access Token #
	my $ua = LWP::UserAgent->new(ssl_opts => {verify_hostname => 1});
	$ua->timeout($timeout);
	my $response = $ua->post(
		"https://datamarket.accesscontrol.windows.net/v2/OAuth2-13/",
		[
			client_id     => $clientid,
			client_secret => $clientsecret,
			scope         => 'http://api.microsofttranslator.com',
			grant_type    => 'client_credentials',
		],
	);
	if ($response->is_success) {
		$response->content =~ /^\{"access_token":"(.*?)","token_type":".*"\}$/;
		my $token = escape("Bearer $1");
		return("$token");
	} else {
		die "$name Failed to get Access Token.\n";
	}
}

sub checkresponse {
	my $input = <STDIN>;
	my @values;

	chomp $input;
	if ($input =~ /^200/) {
		$input =~ /result=(-?\d+)\s?(.*)$/;
		if (!length($1)) {
			warn "$name Command failed: $input\n";
			@values = (-1, -1);
		} else {
			warn "$name Command returned: $input\n" if ($debug);
			@values = ("$1", "$2");
		}
	} else {
		warn "$name Unexpected result: $input\n";
		@values = (-1, -1);
	}
	return @values;
}
